const express = require('express');
const router = express.Router();
const Incident = require('../../models/Incident');
const Notification = require('../../models/Notification');
// Fonction pour cr√©er une notification
const sendNotification = async(userId, message) => {
    try {

        const newNotif = await Notification.create({
            userId,
            message,
            read: false
        });

        console.log(`‚úÖ Notification cr√©√©e pour ${userId}`);
        return newNotif;
    } catch (error) {
        console.error('‚ùå Erreur lors de l‚Äôenregistrement de la notification :', error.message);
    }
};


// üìå ‚û§ R√©cup√©rer **tous** les incidents
router.get('/', async (req, res) => {
    try {
        const incidents = await Incident.find().sort({ createdAt: -1 }).populate('userId', 'email');

        // üêû DEBUG print
        console.log("‚úÖ Incidents r√©cup√©r√©s :", incidents);

        res.json({
            success: true,
            statusCode: 200,
            message: "Incidents r√©cup√©r√©s avec succ√®s.",
            incidents
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des incidents :", error);
        res.json({
            success: false,
            statusCode: 400,
            message: "Une erreur est survenue lors de la r√©cup√©ration des incidents.",
            error: error.message
        });
    }
});


// üìå ‚û§ R√©cup√©rer un incident par ID
router.get('/:id', async(req, res) => {
    try {
        const incident = await Incident.findById(req.params.id).populate('userId', 'email');
        if (!incident) {
            return res.json({ success: false, statusCode: 400, message: "Incident non trouv√©." });
        }
        res.json({ success: true, statusCode: 200, message: "Incident trouv√©.", incident });
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de l'incident :", error);
        res.json({ success: false, statusCode: 400, message: "Erreur serveur." });
    }
});

router.patch('/verify/:id', async (req, res) => {
    try {
        const { id } = req.params;

        const incident = await Incident.findById(id);
        if (!incident) {
            return res.json({ success: false, statusCode: 400, message: "Incident non trouv√©." });
        }

        incident.verified = true;
        await incident.save();

        // Envoi notification √† l'auteur
        const userId = incident.userId;
        const message = "‚úÖ ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ®ŸÑÿßÿ∫ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸÖŸÜ ŸÇÿ®ŸÑ ÿßŸÑÿ•ÿØÿßÿ±ÿ©.";
        await sendNotification(userId, message);

        res.json({ success: true, statusCode: 200, message: "Incident v√©rifi√© et notification envoy√©e." });

    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification de l'incident :", error);
        res.json({ success: false, statusCode: 400, message: "Erreur serveur." });
    }
});


// üìå ‚û§ R√©cup√©rer les incidents par **type**
router.get('/incidentType/:incidentType', async(req, res) => {
    try {
        const { incidentType } = req.params;
        const incidents = await Incident.find({ incidentType }).sort({ createdAt: -1 });

        if (incidents.length === 0) {
            return res.json({ success: false, statusCode: 400, message: "Aucun incident trouv√© pour ce type." });
        }

        res.json({ success: true, statusCode: 200, message: "Incidents trouv√©s.", incidents });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des incidents par type :", error);
        res.json({ success: false, statusCode: 400, message: "Erreur serveur." });
    }
});

// üìå ‚û§ R√©cup√©rer les incidents par **sous-type**
router.get('/subIncidentType/:subIncidentType', async(req, res) => {
    try {
        const { subIncidentType } = req.params;
        const incidents = await Incident.find({ subIncidentType }).sort({ createdAt: -1 });

        if (incidents.length === 0) {
            return res.json({ success: false, statusCode: 400, message: "Aucun incident trouv√© pour ce sous-type." });
        }

        res.json({ success: true, statusCode: 200, message: "Incidents trouv√©s.", incidents });

    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des incidents par sous-type :", error);
        res.json({ success: false, statusCode: 400, message: "Erreur serveur." });
    }
});

router.patch('/status/:id', async (req, res) => {
    try {
        const { id } = req.params;

        const incident = await Incident.findById(id);
        if (!incident) {
            return res.status(404).json({ success: false, message: "Incident non trouv√©." });
        }

        incident.status = "r√©solu";
        await incident.save();

        // Envoi notification √† l'auteur
        const userId = incident.userId;
        const message = "üì¨ ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿ≠ÿßŸÑÿ© ÿßŸÑÿ®ŸÑÿßÿ∫ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ÿ•ŸÑŸâ 'ÿ™ŸÖ ÿßŸÑÿ≠ŸÑ'. ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÉ.";
        await sendNotification(userId, message);

        res.status(200).json({ success: true, message: "Statut mis √† jour et notification envoy√©e." });

    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour du statut :", error);
        res.status(500).json({ success: false, message: "Erreur serveur." });
    }
});


// üìå ‚û§ Supprimer un incident
router.delete('/:id', async(req, res) => {
    try {
        const { id } = req.params;
        const incident = await Incident.findByIdAndDelete(id);

        if (!incident) {
            return res.json({ success: false, statusCode: 400, message: "Incident non trouv√©." });
        }

        res.json({ success: true, statusCode: 200, message: "Incident supprim√© avec succ√®s." });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression :", error);
        res.json({ success: false, statusCode: 400, message: "Erreur serveur." });
    }
});

module.exports = router;