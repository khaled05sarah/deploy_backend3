const express = require('express');
const router = express.Router();
const multer = require('multer');
const User = require('../../models/emp_type/User');
const Mechanic = require('../../models/emp_type/Mechanic');
const Vendor = require('../../models/emp_type/Vendor');
const Towing = require('../../models/emp_type/Towing');
const upload = require("../../upload"); // Importer multer
const bcrypt = require('bcryptjs');

router.post('/createuser', async (req, res) => {
    try {
        // Debug: Log incoming request body
        console.log("Received request body:", req.body);

        const { firstname, lastname, email, phone, password, sex, role } = req.body;

        // Check for missing fields
        if (!firstname || !lastname || !email || !phone || !password || !sex || !role) {
            console.log("Validation failed: Missing required fields.");
            return res.status(400).json({ success: false, message: "ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ŸÖÿ∑ŸÑŸàÿ®ÿ©." });
        }

        // Debug: Log user fields
        console.log(`Trying to create user: ${firstname} ${lastname}, Email: ${email}`);

        // Check if user already exists
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            console.log("User already exists with this email:", email);
            return res.status(400).json({ success: false, message: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿßŸÑŸÅÿπŸÑ." });
        }

        // Validate role
        const validRoles = ["ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿπÿßÿØŸä", "ŸÖŸäŸÉÿßŸÜŸäŸÉŸä", "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±", "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™"];
        if (!validRoles.includes(role)) {
            console.log("Invalid role provided:", role);
            return res.status(400).json({ success: false, message: "ÿßŸÑÿØŸàÿ± ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠." });
        }

        // Hash the password
        const hashedPassword = await bcrypt.hash(password, 10);

        // Debug: Log hashed password (Optional: Do not log in production for security reasons)
        console.log("Hashed password:", hashedPassword);

        // Create new user
        const newUser = new User({
            firstname,
            lastname,
            email,
            phone,
            password: hashedPassword,
            sex,
            role, // ‚úÖ Stock√© en arabe directement
            verified: true
        });

        await newUser.save();

        // Debug: Log the created user object
        console.log("Created user:", newUser);

        // Return success response
        res.status(200).json({
            success: true,
            message: "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÜÿ¨ÿßÿ≠.",
            user: newUser
        });

    } catch (error) {
        // Log error details for debugging
        console.error("ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ:", error);
        res.status(500).json({ success: false, message: "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ", error: error.message });
    }
});

const uploadFields = upload.fields([
    { name: 'profilePhoto', maxCount: 1 },
    { name: 'commerceRegister', maxCount: 1 },
    { name: 'carteidentite', maxCount: 1 },

]);
router.post('/complete-profile', uploadFields, async(req, res) => {
    try {
        const { email, businessAddress, serviceArea, shopAddress, phonePro } = req.body;
        const files = req.files;

        if (!email || !phonePro) {
            return res.status(400).json({ message: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä Ÿàÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑŸÖŸáŸÜŸä ŸÖÿ∑ŸÑŸàÿ®ÿßŸÜ." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ." });
        }

        if (!["ŸÖŸäŸÉÿßŸÜŸäŸÉŸä", "ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™", "ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±"].includes(user.role)) {
            return res.status(400).json({ message: "ÿØŸàÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠." });
        }

        if (!files.profilePhoto || !files.commerceRegister || !files.carteidentite) {
            return res.status(400).json({ message: "Ÿäÿ¨ÿ® ÿ™ŸÇÿØŸäŸÖ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©." });
        }

        let newEntry;

        if (user.role === 'ŸÖŸäŸÉÿßŸÜŸäŸÉŸä') {
            if (!businessAddress) {
                return res.status(400).json({ message: "ÿπŸÜŸàÿßŸÜ ÿßŸÑŸàÿ±ÿ¥ÿ© ŸÖÿ∑ŸÑŸàÿ® ŸÑŸÑŸÖŸäŸÉÿßŸÜŸäŸÉŸä" });
            }
            newEntry = new Mechanic({
                userId: user._id,
                businessAddress,
                phonePro,
                profilePhoto: files.profilePhoto[0].path,
                commerceRegister: files.commerceRegister[0].path,
                carteidentite: files.carteidentite[0].path
            });

        } else if (user.role === 'ÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™') {
            if (!serviceArea || !files.papiersduvehicule) {
                return res.status(400).json({ message: "ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ŸàÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÑÿπÿßŸÖŸÑ ÿ≥ÿ≠ÿ® ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™" });
            }
            newEntry = new Towing({
                userId: user._id,
                serviceArea,
                phonePro,
                profilePhoto: files.profilePhoto[0].path,
                commerceRegister: files.commerceRegister[0].path,
                carteidentite: files.carteidentite[0].path
            });

        } else if (user.role === 'ÿ®ÿßÿ¶ÿπ ŸÇÿ∑ÿπ ÿßŸÑÿ∫Ÿäÿßÿ±') {
            if (!shopAddress) {
                return res.status(400).json({ message: "ÿπŸÜŸàÿßŸÜ ÿßŸÑŸÖÿ™ÿ¨ÿ± ŸÖÿ∑ŸÑŸàÿ® ŸÑŸÑÿ®ÿßÿ¶ÿπ" });
            }
            newEntry = new Vendor({
                userId: user._id,
                shopAddress,
                phonePro,
                profilePhoto: files.profilePhoto[0].path,
                commerceRegister: files.commerceRegister[0].path,
                carteidentite: files.carteidentite[0].path
            });
        }

        if (newEntry) {
            await newEntry.save();
            return res.status(200).json({
                message: `ÿ™ŸÖ ÿßÿ≥ÿ™ŸÉŸÖÿßŸÑ ŸÖŸÑŸÅ ${user.role} ÿ®ŸÜÿ¨ÿßÿ≠!`,
                user: newEntry
            });
        }

    } catch (error) {
        console.error("‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßÿ≥ÿ™ŸÉŸÖÿßŸÑ ÿßŸÑŸÖŸÑŸÅ:", error);
        res.status(500).json({ message: "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿÆÿßÿØŸÖ" });
    }
});
// üìå ‚û§ Lister tous les utilisateurs avec seulement les champs n√©cessaires
router.get('/', async(req, res) => {
    try {
        const users = await User.find().select('firstname lastname email phone role sex'); // ‚úÖ S√©lection des champs
        res.status(200).json({
            success: true,
            statusCode: 200,
            message: "Utilisateurs r√©cup√©r√©s avec succ√®s.",
            users
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            statusCode: 500,
            message: "Erreur serveur.",
            error: error.message
        });
    }
});

// üìå ‚û§ Modifier un utilisateur (email, pr√©nom, nom, t√©l√©phone uniquement)
router.put('/users/:id', async(req, res) => {
    try {
        const { firstname, lastname, email, phone } = req.body;

        const user = await User.findByIdAndUpdate(
            req.params.id, { firstname, lastname, email, phone }, { new: true }
        );

        if (!user) {
            return res.status(404).json({
                success: false,
                statusCode: 404,
                message: "Utilisateur non trouv√©."
            });
        }

        res.status(200).json({
            success: true,
            statusCode: 200,
            message: "Utilisateur mis √† jour avec succ√®s.",
            user
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            statusCode: 500,
            message: "Erreur serveur.",
            error: error.message
        });
    }
});


// üìå ‚û§ Supprimer un utilisateur
router.delete('/users/:id', async(req, res) => {
    try {
        const user = await User.findByIdAndDelete(req.params.id);
        if (!user) {
            return res.status(404).json({ success: false, statusCode: 404, message: "Utilisateur non trouv√©." });
        }

        res.status(200).json({ success: true, statusCode: 200, message: "Utilisateur supprim√© avec succ√®s." });
    } catch (error) {
        res.status(500).json({ success: false, statusCode: 500, message: "Erreur serveur.", error: error.message });
    }
});
module.exports = router;